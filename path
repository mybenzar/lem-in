srcs/add_link_to_list.c:	tmp = data->links;
srcs/add_link_to_list.c:	if (!data->links)
srcs/add_link_to_list.c:		if (!(data->links = (t_lstlin*)malloc(sizeof(t_lstlin))))
srcs/add_link_to_list.c:		init_link_elem(data->links, str, mid);
srcs/add_link_to_list.c:		data->links->id1 = ids[0];
srcs/add_link_to_list.c:		data->links->id2 = ids[1];
srcs/add_link_to_list.c:	if (data->actual_step == 1)
srcs/add_link_to_list.c:		data->actual_step = 2;
srcs/add_room_to_list.c:	if (!(data->rooms = (t_lstrom*)malloc(sizeof(t_lstrom))))
srcs/add_room_to_list.c:	if (!(data->rooms->name = (char*)malloc(sizeof(char) * (len + 1))))
srcs/add_room_to_list.c:		data->rooms->name[i] = str[i];
srcs/add_room_to_list.c:	data->rooms->name[i] = 0;
srcs/add_room_to_list.c:	data->rooms->next = NULL;
srcs/add_room_to_list.c:	if (data->start_end == 1)
srcs/add_room_to_list.c:		data->start = data->rooms;
srcs/add_room_to_list.c:	else if (data->start_end == 2)
srcs/add_room_to_list.c:		data->end = data->rooms;
srcs/add_room_to_list.c:	data->start_end = 0;
srcs/add_room_to_list.c:	data->rooms->id = ++data->nbr_room;
srcs/add_room_to_list.c:	if (data->start_end == 1)
srcs/add_room_to_list.c:		data->start = tmp->next;
srcs/add_room_to_list.c:	else if (data->start_end == 2)
srcs/add_room_to_list.c:		data->end = tmp->next;
srcs/add_room_to_list.c:	data->start_end = 0;
srcs/add_room_to_list.c:	tmp->next->id = ++data->nbr_room;
srcs/add_room_to_list.c:	tmp = data->rooms;
srcs/breadth_first_search.c:	if (!(data->path = (int*)malloc(sizeof(int) * (data->nbr_room + 1))))
srcs/breadth_first_search.c:	data->path[1] = end->room;
srcs/breadth_first_search.c:	data->resid[end->room][end->parent] = 0;
srcs/breadth_first_search.c:	data->resid[end->parent][end->room] = 0;
srcs/breadth_first_search.c:			data->path[i++] = j;
srcs/breadth_first_search.c:			data->resid[end->room][j] = 0;
srcs/breadth_first_search.c:			data->resid[j][end->room] = 0;
srcs/breadth_first_search.c:			data->graph[end->room][0] = 1;
srcs/breadth_first_search.c:	data->path[i] = 0;
srcs/breadth_first_search.c:	data->path[0] = i - 1;
srcs/breadth_first_search.c:	data->max_flow++;
srcs/breadth_first_search.c://	if (i - 1 > data->nbr_lem / data->max_flow)
srcs/breadth_first_search.c:	if (i - 1 > data->path_size)
srcs/breadth_first_search.c:		data->path_size = i - 1;
srcs/breadth_first_search.c:	if (!(start = queue_new(NULL, 0, data->start->id)))
srcs/breadth_first_search.c:		data->graph[i][0] = 0;
srcs/breadth_first_search.c:		while (j <= data->nbr_room)
srcs/breadth_first_search.c:			if (data->graph[i][j] == 1 && data->graph[j][0] == 1
srcs/breadth_first_search.c:				&& data->resid[i][j] == 1 && data->resid[j][i] == 1)
srcs/breadth_first_search.c:				data->graph[j][0] = 0;
srcs/check_and_fill_tree.c:		data->start_end = 1;
srcs/check_and_fill_tree.c:			data->start_end = 2;
srcs/check_and_fill_tree.c:	tmp = data->rooms;
srcs/check_node_format.c:	if (data->actual_step != 1)
srcs/check_part2.c:	data->actual_step = 1;
srcs/check_part2.c:	data->nbr_lem = result;
srcs/check_part2.c:	if (data->start_end)
srcs/check_part2.c:		if (data->actual_step == 0)
srcs/convert_to_usefull.c:	while (i <= data->nbr_room)
srcs/convert_to_usefull.c:		while (j <= data->nbr_room)
srcs/convert_to_usefull.c:			if (data->graph[i][j])
srcs/convert_to_usefull.c:		if (max <= 1 && i != data->start->id && i != data->end->id)
srcs/convert_to_usefull.c:			data->graph[i][0] = 0;
srcs/convert_to_usefull.c:	if (!(data->graph = (char**)malloc(sizeof(char*) * (data->nbr_room + 1))))
srcs/convert_to_usefull.c:	if (!(data->resid = (char**)malloc(sizeof(char*) * (data->nbr_room + 1))))
srcs/convert_to_usefull.c:	while (i <= data->nbr_room)
srcs/convert_to_usefull.c:		if (!(data->graph[i] = (char*)malloc(sizeof(char)
srcs/convert_to_usefull.c:					* (data->nbr_room + 1))))
srcs/convert_to_usefull.c:		if (!(data->resid[i] = (char*)malloc(sizeof(char)
srcs/convert_to_usefull.c:					* (data->nbr_room + 1))))
srcs/convert_to_usefull.c:		ft_memset(data->graph[i], 0, data->nbr_room + 1);
srcs/convert_to_usefull.c:		ft_memset(data->resid[i], 1, data->nbr_room + 1);
srcs/convert_to_usefull.c:		data->graph[i++][0] = 1;
srcs/convert_to_usefull.c:	tmp = data->links;
srcs/convert_to_usefull.c:		data->graph[tmp->id1][tmp->id2] = 1;
srcs/convert_to_usefull.c:		data->graph[tmp->id2][tmp->id1] = 1;
srcs/convert_to_usefull.c:		if ((tmp->id1 == data->start->id || tmp->id2 == data->start->id)
srcs/convert_to_usefull.c:			&& (tmp->id1 == data->end->id || tmp->id2 == data->end->id))
srcs/convert_to_usefull.c:	data->graph[data->start->id][0] = 0;
srcs/convert_to_usefull.c:	if (!(data->exit_paths = (t_lstpat**)malloc(sizeof(t_lstpat*))))
srcs/convert_to_usefull.c:	data->exit_paths[0] = 0;
srcs/convert_to_usefull.c:	flow_optimizer(data, data->end->id, 0);
srcs/display.c:	tmp = data->exit_paths[0];
srcs/display.c:		result += (data->path_size - tmp->path[0]);
srcs/display.c:	result = data->nbr_lem - result;
srcs/display.c:	data->surplus = result % data->max_flow;
srcs/display.c:	result /= data->max_flow;
srcs/display.c:	result = ants_dispatcher(data) + data->path_size;
srcs/display.c:	printf("surplus = %d\n", data->surplus);
srcs/display.c:		tmp = data->exit_paths[0];
srcs/display.c:			if (lem <= data->nbr_lem && i <= data->surplus)
srcs/display.c:				data->surplus--;
srcs/display.c:			else if (tmp->path[0] < result && lem <= data->nbr_lem)
srcs/display.c:			printf("L%d-%s", queue->parent, data->room_tab[((int*)queue->ptr)[queue->room] - 1]->name);
srcs/flow_optimizer.c:	while (i <= data->nbr_room)
srcs/flow_optimizer.c:		while (j <= data->nbr_room)
srcs/flow_optimizer.c:			if (data->graph[i][j] == 1)
srcs/flow_optimizer.c:	printf("ratio = %f\n", (double)data->nbr_room * 2. / (double)avg);
srcs/flow_optimizer.c:	return ((double)data->nbr_room * 2. / (double)avg);
srcs/flow_optimizer.c:	tmp->path = data->path;
srcs/flow_optimizer.c:	if (data->exit_paths[exit_number])
srcs/flow_optimizer.c:		tmp->prev = data->exit_paths[exit_number];
srcs/flow_optimizer.c:		data->exit_paths[exit_number]->next = tmp;
srcs/flow_optimizer.c:	data->exit_paths[exit_number] = tmp;
srcs/flow_optimizer.c:		while (i <= data->nbr_room)
srcs/flow_optimizer.c:			while (j <= data->nbr_room)
srcs/flow_optimizer.c:				data->resid[i][j++] = 1;
srcs/flow_optimizer.c:			data->graph[i][0] = 1;
srcs/flow_optimizer.c:		data->exit_paths[exit_number] = start;
srcs/labelling.c:	while (i <= data->nbr_room)
srcs/labelling.c:		while (j <= data->nbr_room)
srcs/labelling.c:			if (data->graph[i][j] == 1 && data->graph[j][0] == 1
srcs/labelling.c:				&& i != j && data->resid[i][j] == 1 && data->resid[j][i] == 1)
srcs/labelling.c:				data->graph[j][0] = 0;
srcs/labelling.c:				if (i == data->end->id)
srcs/labelling.c:		printf("data->path[%d] = %d\n", j, data->path[j]);
srcs/labelling.c:		data->resid[data->path[j] + 1][data->path[j] + 2] = 0;
srcs/labelling.c:		data->resid[j + 2][data->path[j] + 1]= 0;
srcs/labelling.c:		data->resid[data->path[j] + 1][j] = 0;
srcs/labelling.c:		data->resid[j][data->path[j] + 1]= 0;
srcs/labelling.c:			while (k < data->nbr_room)
srcs/labelling.c:				data->resid[data->path[i]][k] = data->graph[data->path[i]][k];
srcs/labelling.c:				data->resid[k][data->path[i]] = data->graph[k][data->path[i]];
srcs/labelling.c:		while (i <= data->nbr_room)
srcs/labelling.c:			data->graph[i++][0] = 1;
srcs/labelling.c:	data->exit_paths[exit_number] = start;
srcs/leave.c:	while (data->begin_file)
srcs/leave.c:		tmp = data->begin_file->next;
srcs/leave.c:		free(data->begin_file->str);
srcs/leave.c:		free(data->begin_file);
srcs/leave.c:		data->begin_file = (t_lstst*)tmp;
srcs/leave.c:	while (data->rooms)
srcs/leave.c:		tmp = data->rooms->next;
srcs/leave.c:		free(data->rooms->name);
srcs/leave.c:		free(data->rooms);
srcs/leave.c:		data->rooms = (t_lstrom*)tmp;
srcs/leave.c:	while (data->links)
srcs/leave.c:		tmp = data->links->next;
srcs/leave.c:		free(data->links->name1);
srcs/leave.c:		free(data->links);
srcs/leave.c:		data->links = (t_lstlin*)tmp;
srcs/lemin.c:	tmp = data->rooms;
srcs/lemin.c:	if (!(data->room_tab = (t_lstrom **)malloc(sizeof(t_lstrom *) * i)))
srcs/lemin.c:	tmp = data->rooms;
srcs/lemin.c:		data->room_tab[i++] = tmp;
srcs/parser.c:	if (!(data->file->next = (t_lstst*)malloc(sizeof(t_lstst))))
srcs/parser.c:	data->file->next->line = data->file->line + 1;
srcs/parser.c:	data->file = data->file->next;
srcs/parser.c:	data->file->len = len;
srcs/parser.c:	if (!(data->file->str = (char*)malloc(sizeof(char) * (len + 1))))
srcs/parser.c:	while (list && (data->file->str[i++] = list->c))
srcs/parser.c:	data->file->next = NULL;
